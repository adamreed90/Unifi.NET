@page "/"
@using Unifi.NET.AccessViewer.Shared
@using System.Net.Http.Json
@inject HttpClient Http

<PageTitle>UniFi Access Log Viewer</PageTitle>

<div class="container mt-4">
    <h1>Access Log Viewer</h1>
    
    <div class="card mb-4">
        <div class="card-body">
            <h5 class="card-title">Search User</h5>
            <div class="row">
                <div class="col-md-6">
                    <div class="mb-3">
                        <label for="employeeNumber" class="form-label">Employee Number</label>
                        <input type="text" class="form-control" id="employeeNumber" @bind="employeeNumber" @bind:event="oninput" />
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="mb-3">
                        <button class="btn btn-primary mt-4" @onclick="SearchUser" disabled="@(string.IsNullOrWhiteSpace(employeeNumber) || isSearching)">
                            @if (isSearching)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            }
                            Search
                        </button>
                    </div>
                </div>
            </div>
            
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-3" role="alert">
                    @errorMessage
                </div>
            }
            
            @if (currentUser != null)
            {
                <div class="alert alert-success mt-3" role="alert">
                    <h6 class="alert-heading">User Found</h6>
                    <p class="mb-0"><strong>Name:</strong> @currentUser.FullName</p>
                    <p class="mb-0"><strong>Employee #:</strong> @currentUser.EmployeeNumber</p>
                    <p class="mb-0"><strong>Status:</strong> @currentUser.Status</p>
                </div>
            }
        </div>
    </div>
    
    @if (currentUser != null)
    {
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Access Logs</h5>
                
                <div class="row mb-3">
                    <div class="col-md-4">
                        <label for="startDate" class="form-label">Start Date</label>
                        <input type="date" class="form-control" id="startDate" @bind="startDate" />
                    </div>
                    <div class="col-md-4">
                        <label for="endDate" class="form-label">End Date</label>
                        <input type="date" class="form-control" id="endDate" @bind="endDate" />
                    </div>
                    <div class="col-md-4">
                        <button class="btn btn-secondary mt-4" @onclick="LoadAccessLogs" disabled="@isLoadingLogs">
                            @if (isLoadingLogs)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            }
                            Load Logs
                        </button>
                    </div>
                </div>
                
                @if (accessLogs != null && accessLogs.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Timestamp</th>
                                    <th>Door</th>
                                    <th>Building</th>
                                    <th>Floor</th>
                                    <th>Auth Method</th>
                                    <th>Result</th>
                                    <th>Event</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var log in accessLogs)
                                {
                                    <tr>
                                        <td>@FormatTimestamp(log.Timestamp)</td>
                                        <td>@log.DoorName</td>
                                        <td>@(log.BuildingName ?? "-")</td>
                                        <td>@(log.FloorName ?? "-")</td>
                                        <td>@log.AuthMethod</td>
                                        <td>
                                            @if (log.Result == "ACCESS" || log.Result == "ACCESS_GRANTED")
                                            {
                                                <span class="badge bg-success">Granted</span>
                                            }
                                            else if (log.Result == "BLOCKED" || log.Result == "ACCESS_DENIED")
                                            {
                                                <span class="badge bg-danger">Denied</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-secondary">@log.Result</span>
                                            }
                                        </td>
                                        <td>@log.EventMessage</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    
                    @if (totalCount > accessLogs.Count())
                    {
                        <div class="mt-3">
                            <p>Showing @accessLogs.Count() of @totalCount total records</p>
                        </div>
                    }
                }
                else if (accessLogs != null)
                {
                    <div class="alert alert-info" role="alert">
                        No access logs found for the selected date range.
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    private string? employeeNumber;
    private UserSearchResult? currentUser;
    private List<AccessLogEntry>? accessLogs;
    private DateTime startDate = DateTime.Today;
    private DateTime endDate = DateTime.Today;
    private bool isSearching = false;
    private bool isLoadingLogs = false;
    private string? errorMessage;
    private int totalCount = 0;
    
    private async Task SearchUser()
    {
        if (string.IsNullOrWhiteSpace(employeeNumber))
            return;
            
        isSearching = true;
        errorMessage = null;
        currentUser = null;
        accessLogs = null;
        
        try
        {
            var response = await Http.GetAsync($"/api/users/search?employeeNumber={Uri.EscapeDataString(employeeNumber)}");
            
            if (response.IsSuccessStatusCode)
            {
                currentUser = await response.Content.ReadFromJsonAsync<UserSearchResult>();
                if (currentUser != null)
                {
                    await LoadAccessLogs();
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                errorMessage = $"No user found with employee number: {employeeNumber}";
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error searching for user: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to search user: {ex.Message}";
        }
        finally
        {
            isSearching = false;
        }
    }
    
    private async Task LoadAccessLogs()
    {
        if (currentUser == null)
            return;
            
        isLoadingLogs = true;
        errorMessage = null;
        
        try
        {
            var request = new AccessLogRequest
            {
                UserId = currentUser.Id,
                Since = new DateTimeOffset(startDate).ToUnixTimeMilliseconds(),
                Until = new DateTimeOffset(endDate.AddDays(1)).ToUnixTimeMilliseconds(),
                PageSize = 100
            };
            
            var response = await Http.PostAsJsonAsync("/api/access-logs", request);
            
            if (response.IsSuccessStatusCode)
            {
                var logResponse = await response.Content.ReadFromJsonAsync<AccessLogResponse>();
                if (logResponse != null)
                {
                    accessLogs = logResponse.Logs;
                    totalCount = logResponse.TotalCount;
                }
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error loading access logs: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load access logs: {ex.Message}";
        }
        finally
        {
            isLoadingLogs = false;
        }
    }
    
    private string FormatTimestamp(string timestamp)
    {
        if (DateTimeOffset.TryParse(timestamp, out var dateTimeOffset))
        {
            // Parse the timestamp and display in local time with 12-hour format
            // The timestamp comes as "2025-08-25T13:18:18-05:00" 
            return dateTimeOffset.DateTime.ToString("yyyy-MM-dd h:mm:ss tt");
        }
        return timestamp;
    }
}